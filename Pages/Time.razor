@page "/time"
@using seminar2blazor20230107220807
@inject IJSRuntime JSRuntime
@inject HttpClient http
@inject ILocalStorageService LocalStorage
<PageTitle>Login</PageTitle>

@if(@timeTracks != null){
    <table class="table"><Entries />
        <thead>
            <tr>
                <th>Startzeit</th>
                <th>Endzeit</th>
                <th>Ändern</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var data in timeTracks)
            {
                <Seminar2Blazor.Components.Entries track="@data" Change="@Change"></Seminar2Blazor.Components.Entries>
            }
        </tbody>
    </table>
}

<div class="flex flex-row mt-4">
    <p class="col-12">Kommen</p>
    <input type="datetime" @bind=@trackTime.Starttime></input>
</div>
<div class="flex flex-row mt-4">
    <p class="col-12">Gehen</p>
    <input type="datetime" @bind=@trackTime.EndTime></input>
</div>
<div class="flex flex-row mt-4">
    <button type="button" class="btn btn-primary mt-4" onclick=@CreateEntry()>Eintrag hinzufügen</button>
</div>

@code {
    public int userId { get; set; }
    public TimeTrack trackTime { get; set; } = new();
    public List<ChangeTrack> timeTracks { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        userId = await LocalStorage.GetItemAsync<int>("id");
        var list = await http.GetFromJsonAsync<List<TimeTrack>>($"https://seminar2gateway.azure-api.net/service/persons/{userId}/times");
        foreach(var item in list){
            timeTracks.Add(new ChangeTrack {
                Track = new TimeTrack {
                    PersonId = item.PersonId,
                    Starttime = item.Starttime,
                    EndTime = item.EndTime
                },
                Start = item.Starttime,
                End = item.EndTime
        });
        }

    }

    private async Task CreateEntry()
    {
        trackTime.PersonId = userId;
        var res = await http.PostAsJsonAsync<TimeTrack>($"https://seminar2gateway.azure-api.net/service/persons/{userId}/times", trackTime);
    }

    private async Task Change(ChangeTrack t){
        TimeTrack tmp = new TimeTrack {
                PersonId = t.Track.PersonId,
                Starttime = t.Start,
                EndTime = t.End,
            };
        var res = await http.PostAsJsonAsync<TimeTrack>($"https://seminar2gateway.azure-api.net/service/persons/{t.Track.PersonId}/times/{t.Track.Starttime}/{t.Track.EndTime}", tmp);
    }
}
